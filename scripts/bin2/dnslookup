#!/usr/bin/perl

#
# Script to do DNS lookup on a text file
#

sub fail_usage {
  if (scalar @_) {
    print "  \n";
    print "$0: error: \n";
    map { print "   $_\n"; } @_
  }
  print "  \n";
  print "$0: Usage: \n";
  print "  $0 [options] < file\n";
  print "  options: -d (-i)|-n \n";
  print "    -i (ip numbers only) \n";
  print "    -n (domain names only) \n";
  print "    -s <n> ((1) start at nth) \n";
  print "    -t <n> ((1) only do n (-1=all)) \n";
  print "    -h|--help (this screen) \n";
  print "  \n";
  exit (scalar @_) ;
}

my $opt="";
my $debug=0;
my $second=0;
my $start=0;
my $times=0;
my $reverse=0;

while ($ARGV=$ARGV[0]) {
  my $myarg=$ARGV;
#  if ($ARGV eq '-m') {
#    shift @ARGV;
#    if (!($ARGV = $ARGV[0])) { fail_usage ("-m needs an argument"); }
#    if ($ARGV =~ /^-/) { fail_usage ("-m must be followed by an argument"); }
#    $opt_m = $ARGV;
#  }
  if ($ARGV eq '-n' ) {
    if ($opt) { fail_usage ("only one of options (ni) permitted"); } 
    $opt = 'n';
  } elsif ($ARGV eq '-i' ) {
    if ($opt) { fail_usage ("only one of options (ni) permitted"); } 
    $opt = 'i';
  } elsif ($ARGV eq '-s' ) {
    shift @ARGV;
    $ARGV = $ARGV[0];
    if (!($ARGV = $ARGV[0])) { fail_usage ("$myarg needs an argument"); }
    if ($ARGV =~ /^-/) {fail_usage ("$myarg must be followed by an argument"); }
    if ($ARGV !~ /^[0-9]+$/) {fail_usage ("$myarg needs a number "); }
    if ($times) { fail_usage ("-s (start) already specified"); } 
    $start = $ARGV;
  } elsif ($ARGV eq '-t' ) {
    shift @ARGV;
    $ARGV = $ARGV[0];
    if (!($ARGV = $ARGV[0])) { fail_usage ("$myarg needs an argument"); }
    if ($ARGV !~ /^-?[0-9]+$/) {fail_usage ("$myarg needs a number "); }
    if ($times) { fail_usage ("-t (times) already specified"); } 
    $times = $ARGV;
  } elsif ($ARGV eq '-d' or $ARGV eq '-v' ) {
    $debug++ ; 
  } elsif ($ARGV eq '-r' ) {
    $reverse = 1 ; 
  } elsif ($ARGV eq '-h' || $ARGV eq '--help' ) {
    fail_usage();
  } elsif ($ARGV =~ /^-/ ) {
    fail_usage " invalid option ($ARGV)"; 
  } else {
    last ;
  }
  shift @ARGV;
}

if ($debug) { print "args were : "; }
if (!$opt) { $opt = 'i'; }
if (!$start) { $start = 1; }
if (!$times) { $times = 1; }
if ($debug) { print " opt=($opt) debug=($debug) start($start) times($times)"; }
if ($debug) { print "\n"; }
if ($debug) { print "additional arguments were: ", join (':', @ARGV), "\n"; }

use Socket;

my $rest="";
my $begin="";
my $dcount=0;
my $count=0;
while (<>) {
  chomp;
  $rest=$_;
  $begin="";
  $rest =~ s/#.*$//i;
  $comment = $_;
  $comment =~ s/^[^#]*//i;
  if (!/\./) { next; } # print "skipped\n"; next; 
#  print "debug opt=($opt)\n";
  while ($rest) {
    if (($opt eq 'i') && $rest =~ /(^.*?[^\.0-9]|^)([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})([^\.0-9].*?$|$)/) {
      $count++;
      if ($start > $count) {
        $begin .= $1 . $1;
        $rest = $3;
        next;
      }
      $dcount++;
      if ($times > 0 && $times > $dcount) {
        $begin .= $rest;
        $rest = "";
        last;
      }  
      $begin .= $1 ;
      $rest = $3;
      my $ip = $2;
      if ($debug) {  print "debug looking up ip \"$ip\" \n"; }
      $addr = inet_aton($ip);
      $name = gethostbyaddr($addr,AF_INET);
      my $ip2 = sprintf "%-20s", "[$ip]";
      if ($name eq "") { $name = "not found"; }
      $begin .= $ip2 . $name;
    }
    elsif (($opt eq 'n') && $rest =~ /(^.*?[^.a-z0-9-]|^)([a-z][a-z0-9-.]*\.(?:[a-z][a-z]|local|com|edu|org|gov|mil|net|biz|info|name|museum|coop|aero|pro))([^\.a-z0-9-].*?$|$)/i) {
      $count++;
      if ($start > $count) {
        $begin .= $1 . $1;
        $rest = $3;
        next;
      }
      $dcount++;
      if ($debug) {  print "debug c=($count) dc=($dcount) begin = \"$begin\" 1=($1) 2=($2) 3=($3) \n"; }
      if ($times > 0 && $times > $dcount) {
        $begin .= $rest;
        $rest = "";
        last;
      }  
      if ($debug) {  print "debug begin = \"$begin\" 1=($1) 2=($2) 3=($3) \n"; }
      $begin .= $1;
      my $name = $2;
      $rest = $3;
      my $ip="";
      if ($debug) {  print "debug looking up name \"$name\" \n"; }
      my $addr = scalar(gethostbyname($name));
#      my $len = length ($addr);
#      if ($debug) {  print "debug ip length \"$len\" \n"; }
      if (length ($addr) == 4) {
        $ip = inet_ntoa ($addr);
      } 
      if ($ip eq "") { $ip = "not found"; }
#      my $fred = gethost($name);
#      if ($debug) {  print "debug fred = \"$fred\" \n"; }

#      s/$name/$name\[$ip\]/;
      if ($reverse == 1) { $begin .= "[$ip] $name"; }
      else { $begin .= "$name\ [$ip]"; }
      if ($debug) {  print "debug begin = \"$begin\" \n"; }
   # print "$addr\n";
    } else {
      if ($debug) { print "nothing done\n"; }
      $begin .= $rest;
      $rest = "";
      last;
    }
  }
  if ($rest) { $begin .= $rest; $rest = ""; }
} continue {
  if ($rest) { $begin .= $rest; $rest = ""; }
  $_ = $begin . $comment;
  print ;
  print "\n";
}
